require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe SubmittedAnswersController, :type => :controller do
  render_views

  before(:each) do
    @user = FactoryGirl.create(:user, :admin => true)
    sign_in @user
  end

  # This should return the minimal set of attributes required to create a valid
  # SubmittedAnswer. As you add validations to SubmittedAnswer, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { :question_id => 1, :answer_id => 1, :accepted_answer_ids => [1,2], :intensity => 3, :comment => "foobar" }
  }

  let(:invalid_attributes) {
    { :question_id => 1, :answer_id => 1, :intensity => -3, :comment => "foobar" }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SubmittedAnswersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all submitted_answers as @submitted_answers" do
      submitted_answer = FactoryGirl.create(:submitted_answer)
      get :index, {}, valid_session
      expect(assigns(:submitted_answers)).to eq([submitted_answer])
    end
  end

  describe "GET show" do
    it "assigns the requested submitted_answer as @submitted_answer" do
      submitted_answer = FactoryGirl.create(:submitted_answer)
      get :show, {:id => submitted_answer.to_param}, valid_session
      expect(assigns(:submitted_answer)).to eq(submitted_answer)
    end
  end

  describe "GET new" do
    it "assigns a new submitted_answer as @submitted_answer" do
      get :new, {}, valid_session
      expect(assigns(:submitted_answer)).to be_a_new(SubmittedAnswer)
    end
  end

  describe "GET edit" do
    it "assigns the requested submitted_answer as @submitted_answer" do
      submitted_answer = FactoryGirl.create(:submitted_answer)
      get :edit, {:id => submitted_answer.to_param}, valid_session
      expect(assigns(:submitted_answer)).to eq(submitted_answer)
      expect(assigns(:question)).to be_a(Question)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new SubmittedAnswer" do
        expect {
          post :create, {:submitted_answer => valid_attributes}, valid_session
        }.to change(SubmittedAnswer, :count).by(1)
      end

      it "assigns a newly created submitted_answer as @submitted_answer" do
        post :create, {:submitted_answer => valid_attributes}, valid_session
        expect(assigns(:submitted_answer)).to be_a(SubmittedAnswer)
        expect(assigns(:submitted_answer)).to be_persisted
      end

      it "redirects to the created submitted_answer" do
        post :create, {:submitted_answer => valid_attributes}, valid_session
        expect(response).to redirect_to(SubmittedAnswer.last)
      end

      it "redirects to the redirect parameter" do
        post :create, {:submitted_answer => valid_attributes, :redirect => root_path}, valid_session
        expect(response).to redirect_to(root_path)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved submitted_answer as @submitted_answer" do
        post :create, {:submitted_answer => invalid_attributes}, valid_session
        expect(assigns(:submitted_answer)).to be_a_new(SubmittedAnswer)
      end

      it "re-renders the 'new' template" do
        post :create, {:submitted_answer => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_comment) { "new comment"}

      let(:new_attributes) {
        { :question_id => 1, :answer_id => 1, :accepted_answer_ids => [1,2,3], :intensity => 2, :comment => new_comment }
      }

      it "updates the requested submitted_answer" do
        submitted_answer = FactoryGirl.create(:submitted_answer)
        put :update, {:id => submitted_answer.to_param, :submitted_answer => new_attributes}, valid_session
        submitted_answer.reload
        expect(submitted_answer.comment).to eq(new_comment)
      end

      it "assigns the requested submitted_answer as @submitted_answer" do
        submitted_answer = FactoryGirl.create(:submitted_answer)
        put :update, {:id => submitted_answer.to_param, :submitted_answer => valid_attributes}, valid_session
        expect(assigns(:submitted_answer)).to eq(submitted_answer)
      end

      it "redirects to the submitted_answer" do
        submitted_answer = FactoryGirl.create(:submitted_answer)
        put :update, {:id => submitted_answer.to_param, :submitted_answer => valid_attributes}, valid_session
        expect(response).to redirect_to(submitted_answer)
      end
    end

    describe "with invalid params" do
      it "assigns the submitted_answer as @submitted_answer" do
        submitted_answer = FactoryGirl.create(:submitted_answer)
        put :update, {:id => submitted_answer.to_param, :submitted_answer => invalid_attributes}, valid_session
        expect(assigns(:submitted_answer)).to eq(submitted_answer)
      end

      it "re-renders the 'edit' template" do
        submitted_answer = FactoryGirl.create(:submitted_answer)
        put :update, {:id => submitted_answer.to_param, :submitted_answer => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested submitted_answer" do
      submitted_answer = FactoryGirl.create(:submitted_answer)
      expect {
        delete :destroy, {:id => submitted_answer.to_param}, valid_session
      }.to change(SubmittedAnswer, :count).by(-1)
    end

    it "redirects to the submitted_answers list" do
      submitted_answer = FactoryGirl.create(:submitted_answer)
      delete :destroy, {:id => submitted_answer.to_param}, valid_session
      expect(response).to redirect_to(submitted_answers_url)
    end
  end

end
